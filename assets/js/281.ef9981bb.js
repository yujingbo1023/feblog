(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{6213:function(a,r,e){"use strict";e.r(r);var l=e(15),v=Object(l.a)({},(function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"一-webpack与grunt、gulp的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-webpack与grunt、gulp的不同"}},[a._v("#")]),a._v(" 一，webpack与grunt、gulp的不同")]),a._v(" "),e("ol",[e("li",[a._v("grunt和gulp是基于任务和流的。"),e("br")]),a._v(" "),e("li",[a._v("webpack是基于入口的。webapck会自动地递归解析入口所加载的所有资源文件，然后用不同的loader来处理不同的文件，用Plugin来扩展webpack的功能"),e("br")])]),a._v(" "),e("h2",{attrs:{id:"二-与webpack类似的工具还有哪些-谈谈你为什么最终选择-或放弃-使用webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-与webpack类似的工具还有哪些-谈谈你为什么最终选择-或放弃-使用webpack"}},[a._v("#")]),a._v(" 二，与webpack类似的工具还有哪些?谈谈你为什么最终选择（或放弃）使用webpack?")]),a._v(" "),e("p",[e("strong",[a._v("webpack适用于大型复杂的前端站点构建")])]),a._v(" "),e("p",[e("strong",[a._v("rollup适用于基础库的打包，如vue、react")])]),a._v(" "),e("p",[e("strong",[a._v("适用于简单的实验性项目，可以满足低门槛的快速看到效果")])]),a._v(" "),e("h2",{attrs:{id:"三-有哪些常见的loader-他们是解决什么问题的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-有哪些常见的loader-他们是解决什么问题的"}},[a._v("#")]),a._v(" 三，有哪些常见的Loader?他们是解决什么问题的?")]),a._v(" "),e("ol",[e("li",[a._v("file-loader: 把文件输出到一个文件夹中，在代码中通过相对URL去引用输出的文件"),e("br")]),a._v(" "),e("li",[a._v("url-loader: 和file-loader类似，但是能在文件很小的情况下以base64的方式把文件内容注入到代码中去"),e("br")]),a._v(" "),e("li",[a._v("source-map-loader: 加载额外的Source Map文件，以方便断点调试"),e("br")]),a._v(" "),e("li",[a._v("image-loader: 加载并且压缩图片文件"),e("br")]),a._v(" "),e("li",[a._v("babel-loader: 把ES6转换成ES5"),e("br")]),a._v(" "),e("li",[a._v("css-loader: 加载 CSS，支持模块化、压缩、文件导入等特性"),e("br")]),a._v(" "),e("li",[a._v("style-loader: 把CSS代码注入到JavaScript中，通过DOM操作去加载 CSS"),e("br")]),a._v(" "),e("li",[a._v("eslint-loader: 通过ESLint检查JavaScript 代码"),e("br")])]),a._v(" "),e("h2",{attrs:{id:"四-loader和plugin的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-loader和plugin的不同"}},[a._v("#")]),a._v(" 四，loader和plugin的不同")]),a._v(" "),e("ol",[e("li",[a._v("loader: Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力"),e("br")]),a._v(" "),e("li",[a._v("plugin: Plugin可以扩展webpack的功能，让webpack具有更多的灵活性"),e("br")])]),a._v(" "),e("h2",{attrs:{id:"五-webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[a._v("#")]),a._v(" 五，webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全")]),a._v(" "),e("ol",[e("li",[a._v("初始化参数:从配置文件和Shell语句中读取与合并参数，得出最终的参数"),e("br")]),a._v(" "),e("li",[a._v("开始编译:用上一步得到的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译"),e("br")]),a._v(" "),e("li",[a._v("确定入口:根据配置中的entry找出所有的入口文件"),e("br")]),a._v(" "),e("li",[a._v("编译模块:从入口文件触发，调用所有配置的loader对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过本步骤的处理"),e("br")]),a._v(" "),e("li",[a._v("完成模块编译:在经过第四步使用loader翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系;"),e("br")]),a._v(" "),e("li",[a._v("输出资源:根据入口和模块之间的依赖关系，组装成一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会;"),e("br")]),a._v(" "),e("li",[a._v("输出完成:在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统"),e("br")])]),a._v(" "),e("h2",{attrs:{id:"六-如何利用webpack来优化前端性能-提高性能和体验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-如何利用webpack来优化前端性能-提高性能和体验"}},[a._v("#")]),a._v(" 六，如何利用webpack来优化前端性能(提高性能和体验)")]),a._v(" "),e("p",[e("strong",[a._v("压缩代码")])]),a._v(" "),e("ol",[e("li",[a._v("压缩js：uglifyjsplugin和parallelUglifyPlugin"),e("br")]),a._v(" "),e("li",[a._v("压缩css：cssnano / css-loader?minimize"),e("br")])]),a._v(" "),e("p",[e("strong",[a._v("利用CND加速")])]),a._v(" "),e("ol",[e("li",[a._v("可以利用webpack对于output参数和各loader的publicPath参数来修改资源路径"),e("br")])]),a._v(" "),e("p",[e("strong",[a._v("Tree Shaking")])]),a._v(" "),e("ol",[e("li",[a._v("将代码中永远不会走到的片段删除掉。可以通过在启动webpack时追加参数--optimize-minimize来实现"),e("br")])]),a._v(" "),e("p",[e("strong",[a._v("提取公共代码")])]),a._v(" "),e("h2",{attrs:{id:"七-如何提高webpack的构建速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-如何提高webpack的构建速度"}},[a._v("#")]),a._v(" 七，如何提高webpack的构建速度")]),a._v(" "),e("ol",[e("li",[a._v("多入口情况下，使用CommonsChunkPlugin来提取公共代码"),e("br")]),a._v(" "),e("li",[a._v("使用externals配置来提取常用库"),e("br")]),a._v(" "),e("li",[a._v("利用DlIPugin和DlReferencePlugin预编译资源模块通过DIIPlugin来对那些我们引用但是绝对不会修改的npm包来进行预编译，再通过DIReferencePlugin将预编译的模块加载进来"),e("br")]),a._v(" "),e("li",[a._v("使用Happypack实现多线程加速编译"),e("br")]),a._v(" "),e("li",[a._v("使用webpack-uglify-parallel来提升uglifyPlugin的压缩速度"),e("br")]),a._v(" "),e("li",[a._v("使用Tree-shaking和scoped Hoisting来剔除多余代码"),e("br")])])])}),[],!1,null,null,null);r.default=v.exports}}]);