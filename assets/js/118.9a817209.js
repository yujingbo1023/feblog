(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{5764:function(s,a,n){s.exports=n.p+"assets/img/fsadfasdfasdfsadf.a90808ed.png"},5765:function(s,a,n){s.exports=n.p+"assets/img/fsadfsadfdsaf.15bf5b9c.png"},5766:function(s,a,n){s.exports=n.p+"assets/img/fsdfasdfasdfasdfsd.51f87c76.png"},6189:function(s,a,n){"use strict";n.r(a);var e=n(15),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"_1-有哪些常见的loader-他们是解决什么问题的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-有哪些常见的loader-他们是解决什么问题的"}},[s._v("#")]),s._v(" 1. 有哪些常见的Loader?他们是解决什么问题的?")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("file-loader: \n    把文件输出到一个文件夹中，在代码中通过相对URL去引用输出的文件\nurl-loader: \n    和file-loader类似，但是能在文件很小的情况下以base64的方式把文件内容注入到代码中去\nsource-map-loader: \n    加载额外的Source Map文件，以方便断点调试\nimage-loader: \n    加载并且压缩图片文件\nbabel-loader: \n    把ES6转换成ES5\ncss-loader: \n    加载 CSS，支持模块化、压缩、文件导入等特性\nstyle-loader: \n    把CSS代码注入到JavaScript中，通过DOM操作去加载 CSS\neslint-loader: \n    通过ESLint检查JavaScript 代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h2",{attrs:{id:"_2-loader和plugin的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-loader和plugin的不同"}},[s._v("#")]),s._v(" 2. loader和plugin的不同")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("loader: \n    1）Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力\n    2）本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。\n    3）在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。\n\nplugin: \n    1）Plugin可以扩展webpack的功能，让webpack具有更多的灵活性\n    2）插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\n    3）Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h2",{attrs:{id:"_3-webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[s._v("#")]),s._v(" 3. webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：\n\n初始化参数：\n    从配置文件和 Shell 语句中读取与合并参数，得出最终的参数\n\n开始编译：\n    用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译\n\n确定入口：\n    根据配置中的 entry 找出所有的入口文件\n\n编译模块：\n    从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理\n\n完成模块编译：\n    在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系\n\n输出资源：\n    根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会\n\n输出完成：\n    在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统\n\n在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("h2",{attrs:{id:"_4-如何利用webpack来优化前端性能-提高性能和体验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何利用webpack来优化前端性能-提高性能和体验"}},[s._v("#")]),s._v(" 4. 如何利用webpack来优化前端性能(提高性能和体验)")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("压缩代码\n    压缩js：uglifyjsplugin和parallelUglifyPlugin\n    压缩css：cssnano / css-loader?minimize\n\n利用CND加速\n    可以利用webpack对于output参数和各loader的publicPath参数来修改资源路径\n\nTree Shaking\n    将代码中永远不会走到的片段删除掉。可以通过在启动webpack时追加参数--optimize-minimize来实现\n\n提取公共代码\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h2",{attrs:{id:"_5-如何提高webpack的构建速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何提高webpack的构建速度"}},[s._v("#")]),s._v(" 5. 如何提高webpack的构建速度")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1,使用高版本的 Webpack 和 Node.js\n\n2,多进程/多实例构建：HappyPack(不维护了)、thread-loader\n\n3,多进程并行压缩\n\n4,通过 mini-css-extract-plugin 提取 Chunk 中的 CSS 代码到单独文件，通过 css-loader 的 minimize 选项开启 cssnano 压缩 CSS。\n\n5,图片压缩\n\n6,提取页面公共资源\n\n7,使用 html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中\n\n8,使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。\n\n9,开启缓存: babel-loader 开启缓存, terser-webpack-plugin 开启缓存, 使用 cache-loader 或者 hard-source-webpack-plugin\n\n10,Tree shaking\n\n11,Scope hoisting 构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突\n\n12,动态Polyfill\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("h2",{attrs:{id:"_6-webpack和gulp有什么不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-webpack和gulp有什么不同"}},[s._v("#")]),s._v(" 6. webpack和gulp有什么不同？")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("grunt和gulp是基于任务和流的。\n\nwebpack是基于入口的。webapck会自动地递归解析入口所加载的所有资源文件，然后用不同的loader来处理不同的文件，用Plugin来扩展webpack的功能\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"_7-source-map是什么-生产环境怎么用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-source-map是什么-生产环境怎么用"}},[s._v("#")]),s._v(" 7. source map是什么？生产环境怎么用？")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("source map 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。\n\nmap文件只要不打开开发者工具，浏览器是不会加载的。\n\n线上环境一般处理方案：\n    sourcemap：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h2",{attrs:{id:"_8-说一下-webpack-的热更新原理吧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-说一下-webpack-的热更新原理吧"}},[s._v("#")]),s._v(" 8. 说一下 Webpack 的热更新原理吧？")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。\n\nHMR的核心就是客户端从服务端拉去更新后的文件，实际上 WDS 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。\n\n后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"_9-区别module-chunk-和-bundle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-区别module-chunk-和-bundle"}},[s._v("#")]),s._v(" 9. 区别module，chunk 和 bundle ?")]),s._v(" "),e("img",{attrs:{src:n(5764)}}),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.module: 我们手写下一个一个的文件\n2.webpack开始打包后, 会根据文件引用关系生成内存中的几个 chunk 文件\n3.保存到本地的是bundle文件, 一般一个chunk对应一个bundle, 但也可能一个chunk对应多个bundle(拆分样式打包)\n4.拆分js是在生成chunk前, 所以拆分出的js都是一个单独的chunk\n5.拆分css是在生成chunk后, 所以拆分出的css与js共用一个chunk\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"_10-区别webpackprefetch与webpackpreload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-区别webpackprefetch与webpackpreload"}},[s._v("#")]),s._v(" 10. 区别webpackPrefetch与webpackPreload")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.webpackPreload: \n(1)同时并行请求加载, 针对当前就需要的bundle文件\n(2)&lt;link href=’’ rel=preload>\n\n2.webpackPrefetch: \n(1)空闲时才请求加载, 针对其它路由需要的bundle文件 \n(2)&lt;link href=’’ rel=prefectch>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"_11-区别source-map-中inline与eval-cheap与module"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-区别source-map-中inline与eval-cheap与module"}},[s._v("#")]),s._v(" 11. 区别source-map 中inline与eval, cheap与module")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.inline\n(1)生成全部的source map后整体内联到打包文件中\n(2)更新代码时完全重新生成source map\n\n2.eval\n(1)以模块为单位生成source map内联到打包文件中\n(2)更新代码时只会重新生成相应的source map\n(3)主要是更新打包速度快于inline\n\n3.cheap\n(1)只记录代码行号, 不记录列号\n(2)只映射自定义模块\n\n4.module\n(1)只记录代码行号, 不记录列号\n(2)只映射第三方模块\n\n最佳实践:\n1)开发环境------devtool: 'cheap-module-eval-source-map'\n2)测试生产环境-----devtool: 'cheap-module-source-map'\n3)上线生产环境-----devtool: 'none'\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h2",{attrs:{id:"_12-webpack如何优化打包文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-webpack如何优化打包文件"}},[s._v("#")]),s._v(" 12. webpack如何优化打包文件")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.目标\n兼容性 / 减小打包文件/ 懒加载 / 预加载 / 首屏加载优化\n\n2.常用技巧\n(1)兼容低版本浏览器\n(2)拆分打包 &amp; 压缩\n(3)异步/懒加载\n(4)预取/预加载\n(5)打包文件hash化(利用浏览缓存)\n(6)Tree Shaking\n(7)Scope Hoisting(作用域提升)\n(8)服务器(nginx)开启gzip\n(9)打包文件分析\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("img",{attrs:{src:n(5765)}}),s._v(" "),e("h2",{attrs:{id:"_13-webpack如何优化打包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-webpack如何优化打包"}},[s._v("#")]),s._v(" 13. webpack如何优化打包")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1.目标\n加快打包  /  提升开发调试体验\n\n2.常用技巧\n(1)loader增加include匹配特定条件\n(2)合理配置extensions扩展名\n(3)配置resolve.alias字段, 指定常用的路径别名\n(4)dll第三方模块进行预打包==> 使HardSourceWebpackPlugin更简洁更快\n(5)eslint代码规范检查\n(6)sourcemap 源码映射\n(7)live-reload / hot-reload\n(8)加快loader处理: 多线程/多进程loader\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("img",{attrs:{src:n(5766)}}),s._v(" "),e("h2",{attrs:{id:"_14-webpack打包后文件体积过大怎么办"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-webpack打包后文件体积过大怎么办"}},[s._v("#")]),s._v(" 14. webpack打包后文件体积过大怎么办？")]),s._v(" "),e("hr"),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("异步加载模块（代码分割）；提取第三方库（使用cdn或者vender）；代码压缩；去除不必要的插件；去除devtool选项，dllplugin等等。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);